// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package main

type GrafanaDashboard struct {
	// Dashboard corresponds to the JSON schema field "dashboard".
	Dashboard GrafanaDashboardDashboard `json:"dashboard" yaml:"dashboard" mapstructure:"dashboard"`

	// FolderId corresponds to the JSON schema field "folderId".
	FolderId int32 `json:"folderId" yaml:"folderId" mapstructure:"folderId"`

	// Overwrite corresponds to the JSON schema field "overwrite".
	Overwrite bool `json:"overwrite" yaml:"overwrite" mapstructure:"overwrite"`
}

type GrafanaDashboardDashboard struct {
	// Id corresponds to the JSON schema field "id".
	Id *int32 `json:"id" yaml:"id" mapstructure:"id"`

	// Panels corresponds to the JSON schema field "panels".
	Panels []GrafanaPanel `json:"panels" yaml:"panels" mapstructure:"panels"`

	// Refresh corresponds to the JSON schema field "refresh".
	Refresh string `json:"refresh" yaml:"refresh" mapstructure:"refresh"`

	// SchemaVersion corresponds to the JSON schema field "schemaVersion".
	SchemaVersion int32 `json:"schemaVersion" yaml:"schemaVersion" mapstructure:"schemaVersion"`

	// Tags corresponds to the JSON schema field "tags".
	Tags []string `json:"tags" yaml:"tags" mapstructure:"tags"`

	// Timezone corresponds to the JSON schema field "timezone".
	Timezone string `json:"timezone" yaml:"timezone" mapstructure:"timezone"`

	// Title corresponds to the JSON schema field "title".
	Title string `json:"title,omitempty" yaml:"title,omitempty" mapstructure:"title,omitempty"`

	// Uid corresponds to the JSON schema field "uid".
	Uid string `json:"uid" yaml:"uid" mapstructure:"uid"`

	// Version corresponds to the JSON schema field "version".
	Version int32 `json:"version" yaml:"version" mapstructure:"version"`
}

type GrafanaDatasource struct {
	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`

	// Uid corresponds to the JSON schema field "uid".
	Uid string `json:"uid" yaml:"uid" mapstructure:"uid"`
}

type GrafanaPanel struct {
	// Datasource corresponds to the JSON schema field "datasource".
	Datasource GrafanaDatasource `json:"datasource" yaml:"datasource" mapstructure:"datasource"`

	// FieldConfig corresponds to the JSON schema field "fieldConfig".
	FieldConfig GrafanaPanelFieldConfigKey `json:"fieldConfig" yaml:"fieldConfig" mapstructure:"fieldConfig"`

	// GridPos corresponds to the JSON schema field "gridPos".
	GridPos GrafanaPanelGridPos `json:"gridPos" yaml:"gridPos" mapstructure:"gridPos"`

	// Id corresponds to the JSON schema field "id".
	Id int32 `json:"id" yaml:"id" mapstructure:"id"`

	// Interval corresponds to the JSON schema field "interval".
	Interval string `json:"interval" yaml:"interval" mapstructure:"interval"`

	// Options corresponds to the JSON schema field "options".
	Options GrafanaPanelOptionsKey `json:"options" yaml:"options" mapstructure:"options"`

	// Targets corresponds to the JSON schema field "targets".
	Targets []GrafanaPanelTargetsObject `json:"targets" yaml:"targets" mapstructure:"targets"`

	// Title corresponds to the JSON schema field "title".
	Title string `json:"title" yaml:"title" mapstructure:"title"`

	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`
}

type GrafanaPanelFieldConfigKey struct {
	// Defaults corresponds to the JSON schema field "defaults".
	Defaults GrafanaPanelFieldConfigKeyDefaults `json:"defaults" yaml:"defaults" mapstructure:"defaults"`

	// Overrides corresponds to the JSON schema field "overrides".
	Overrides []PanelOverrideProperties `json:"overrides" yaml:"overrides" mapstructure:"overrides"`
}

type GrafanaPanelFieldConfigKeyDefaults struct {
	// Color corresponds to the JSON schema field "color".
	Color GrafanaPanelFieldConfigKeyDefaultsColor `json:"color" yaml:"color" mapstructure:"color"`

	// Custom corresponds to the JSON schema field "custom".
	Custom GrafanaPanelFieldConfigKeyDefaultsCustom `json:"custom" yaml:"custom" mapstructure:"custom"`

	// Mappings corresponds to the JSON schema field "mappings".
	Mappings []string `json:"mappings" yaml:"mappings" mapstructure:"mappings"`

	// Max corresponds to the JSON schema field "max".
	Max *int32 `json:"max,omitempty" yaml:"max,omitempty" mapstructure:"max,omitempty"`

	// Min corresponds to the JSON schema field "min".
	Min *int32 `json:"min,omitempty" yaml:"min,omitempty" mapstructure:"min,omitempty"`

	// Thresholds corresponds to the JSON schema field "thresholds".
	Thresholds GrafanaPanelFieldConfigKeyDefaultsThresholds `json:"thresholds" yaml:"thresholds" mapstructure:"thresholds"`
}

type GrafanaPanelFieldConfigKeyDefaultsColor struct {
	// Mode corresponds to the JSON schema field "mode".
	Mode string `json:"mode" yaml:"mode" mapstructure:"mode"`
}

type GrafanaPanelFieldConfigKeyDefaultsCustom struct {
	// AxisCenteredZero corresponds to the JSON schema field "axisCenteredZero".
	AxisCenteredZero bool `json:"axisCenteredZero" yaml:"axisCenteredZero" mapstructure:"axisCenteredZero"`

	// AxisColorMode corresponds to the JSON schema field "axisColorMode".
	AxisColorMode string `json:"axisColorMode" yaml:"axisColorMode" mapstructure:"axisColorMode"`

	// AxisLabel corresponds to the JSON schema field "axisLabel".
	AxisLabel string `json:"axisLabel" yaml:"axisLabel" mapstructure:"axisLabel"`

	// AxisPlacement corresponds to the JSON schema field "axisPlacement".
	AxisPlacement string `json:"axisPlacement" yaml:"axisPlacement" mapstructure:"axisPlacement"`

	// BarAlignment corresponds to the JSON schema field "barAlignment".
	BarAlignment int32 `json:"barAlignment" yaml:"barAlignment" mapstructure:"barAlignment"`

	// DrawStyle corresponds to the JSON schema field "drawStyle".
	DrawStyle string `json:"drawStyle" yaml:"drawStyle" mapstructure:"drawStyle"`

	// FillOpacity corresponds to the JSON schema field "fillOpacity".
	FillOpacity int32 `json:"fillOpacity" yaml:"fillOpacity" mapstructure:"fillOpacity"`

	// GradientMode corresponds to the JSON schema field "gradientMode".
	GradientMode string `json:"gradientMode" yaml:"gradientMode" mapstructure:"gradientMode"`

	// HideFrom corresponds to the JSON schema field "hideFrom".
	HideFrom GrafanaPanelFieldConfigKeyDefaultsCustomHideFrom `json:"hideFrom" yaml:"hideFrom" mapstructure:"hideFrom"`

	// LineInterpolation corresponds to the JSON schema field "lineInterpolation".
	LineInterpolation string `json:"lineInterpolation" yaml:"lineInterpolation" mapstructure:"lineInterpolation"`

	// LineWidth corresponds to the JSON schema field "lineWidth".
	LineWidth int32 `json:"lineWidth" yaml:"lineWidth" mapstructure:"lineWidth"`

	// PointSize corresponds to the JSON schema field "pointSize".
	PointSize int32 `json:"pointSize" yaml:"pointSize" mapstructure:"pointSize"`

	// ScaleDistribution corresponds to the JSON schema field "scaleDistribution".
	ScaleDistribution GrafanaPanelFieldConfigKeyDefaultsCustomScaleDistribution `json:"scaleDistribution" yaml:"scaleDistribution" mapstructure:"scaleDistribution"`

	// ShowPoints corresponds to the JSON schema field "showPoints".
	ShowPoints string `json:"showPoints" yaml:"showPoints" mapstructure:"showPoints"`

	// SpanNulls corresponds to the JSON schema field "spanNulls".
	SpanNulls bool `json:"spanNulls" yaml:"spanNulls" mapstructure:"spanNulls"`

	// Stacking corresponds to the JSON schema field "stacking".
	Stacking GrafanaPanelFieldConfigKeyDefaultsCustomStacking `json:"stacking" yaml:"stacking" mapstructure:"stacking"`

	// ThresholdsStyle corresponds to the JSON schema field "thresholdsStyle".
	ThresholdsStyle GrafanaPanelFieldConfigKeyDefaultsCustomThresholdsStyle `json:"thresholdsStyle" yaml:"thresholdsStyle" mapstructure:"thresholdsStyle"`
}

type GrafanaPanelFieldConfigKeyDefaultsCustomHideFrom struct {
	// Legend corresponds to the JSON schema field "legend".
	Legend bool `json:"legend" yaml:"legend" mapstructure:"legend"`

	// Tooltip corresponds to the JSON schema field "tooltip".
	Tooltip bool `json:"tooltip" yaml:"tooltip" mapstructure:"tooltip"`

	// Viz corresponds to the JSON schema field "viz".
	Viz bool `json:"viz" yaml:"viz" mapstructure:"viz"`
}

type GrafanaPanelFieldConfigKeyDefaultsCustomScaleDistribution struct {
	// Type corresponds to the JSON schema field "type".
	Type string `json:"type" yaml:"type" mapstructure:"type"`
}

type GrafanaPanelFieldConfigKeyDefaultsCustomStacking struct {
	// Group corresponds to the JSON schema field "group".
	Group string `json:"group" yaml:"group" mapstructure:"group"`

	// Mode corresponds to the JSON schema field "mode".
	Mode string `json:"mode" yaml:"mode" mapstructure:"mode"`
}

type GrafanaPanelFieldConfigKeyDefaultsCustomThresholdsStyle struct {
	// Mode corresponds to the JSON schema field "mode".
	Mode string `json:"mode" yaml:"mode" mapstructure:"mode"`
}

type GrafanaPanelFieldConfigKeyDefaultsThresholds struct {
	// Mode corresponds to the JSON schema field "mode".
	Mode string `json:"mode" yaml:"mode" mapstructure:"mode"`

	// Steps corresponds to the JSON schema field "steps".
	Steps []GrafanaPanelFieldConfigKeyDefaultsThresholdsStepsElem `json:"steps" yaml:"steps" mapstructure:"steps"`
}

type GrafanaPanelFieldConfigKeyDefaultsThresholdsStepsElem struct {
	// Color corresponds to the JSON schema field "color".
	Color string `json:"color" yaml:"color" mapstructure:"color"`

	// Value corresponds to the JSON schema field "value".
	Value *int32 `json:"value" yaml:"value" mapstructure:"value"`
}

type GrafanaPanelGridPos struct {
	// H corresponds to the JSON schema field "h".
	H int32 `json:"h" yaml:"h" mapstructure:"h"`

	// W corresponds to the JSON schema field "w".
	W int32 `json:"w" yaml:"w" mapstructure:"w"`

	// X corresponds to the JSON schema field "x".
	X int32 `json:"x" yaml:"x" mapstructure:"x"`

	// Y corresponds to the JSON schema field "y".
	Y int32 `json:"y" yaml:"y" mapstructure:"y"`
}

type GrafanaPanelOptionsKey struct {
	// Legend corresponds to the JSON schema field "legend".
	Legend GrafanaPanelOptionsKeyLegend `json:"legend" yaml:"legend" mapstructure:"legend"`

	// Tooltip corresponds to the JSON schema field "tooltip".
	Tooltip GrafanaPanelOptionsKeyTooltip `json:"tooltip" yaml:"tooltip" mapstructure:"tooltip"`
}

type GrafanaPanelOptionsKeyLegend struct {
	// Calcs corresponds to the JSON schema field "calcs".
	Calcs []string `json:"calcs" yaml:"calcs" mapstructure:"calcs"`

	// DisplayMode corresponds to the JSON schema field "displayMode".
	DisplayMode string `json:"displayMode" yaml:"displayMode" mapstructure:"displayMode"`

	// Placement corresponds to the JSON schema field "placement".
	Placement string `json:"placement" yaml:"placement" mapstructure:"placement"`

	// ShowLegend corresponds to the JSON schema field "showLegend".
	ShowLegend bool `json:"showLegend" yaml:"showLegend" mapstructure:"showLegend"`
}

type GrafanaPanelOptionsKeyTooltip struct {
	// Mode corresponds to the JSON schema field "mode".
	Mode string `json:"mode" yaml:"mode" mapstructure:"mode"`

	// Sort corresponds to the JSON schema field "sort".
	Sort string `json:"sort" yaml:"sort" mapstructure:"sort"`
}

type GrafanaPanelTargetsObject struct {
	// Datasource corresponds to the JSON schema field "datasource".
	Datasource GrafanaDatasource `json:"datasource" yaml:"datasource" mapstructure:"datasource"`

	// EditorMode corresponds to the JSON schema field "editorMode".
	EditorMode string `json:"editorMode" yaml:"editorMode" mapstructure:"editorMode"`

	// Expr corresponds to the JSON schema field "expr".
	Expr string `json:"expr" yaml:"expr" mapstructure:"expr"`

	// Instant corresponds to the JSON schema field "instant".
	Instant bool `json:"instant" yaml:"instant" mapstructure:"instant"`

	// Range corresponds to the JSON schema field "range".
	Range bool `json:"range" yaml:"range" mapstructure:"range"`

	// RefId corresponds to the JSON schema field "refId".
	RefId string `json:"refId" yaml:"refId" mapstructure:"refId"`
}

type PanelOverrideProperties struct {
	// Matcher corresponds to the JSON schema field "matcher".
	Matcher PanelOverridePropertiesMatcher `json:"matcher" yaml:"matcher" mapstructure:"matcher"`

	// Properties corresponds to the JSON schema field "properties".
	Properties []map[string]interface{} `json:"properties" yaml:"properties" mapstructure:"properties"`
}

type PanelOverridePropertiesMatcher struct {
	// Id corresponds to the JSON schema field "id".
	Id string `json:"id" yaml:"id" mapstructure:"id"`

	// Options corresponds to the JSON schema field "options".
	Options string `json:"options" yaml:"options" mapstructure:"options"`
}
